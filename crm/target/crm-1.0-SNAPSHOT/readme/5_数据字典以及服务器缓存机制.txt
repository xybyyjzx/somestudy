
数据字典
    为了前端表单中的可选元素，提供选项信息使用的数据
    可供选择的元素：
    单选框 复选框 下拉框

    对于我们之前的写法，大多数可供选择的元素都是在页面中写死的，将来这些数据我们要给它们写活

    数据字典将来应用最多的元素，是下拉框

观察数据字典相关表

     字典类型表
     code 字典类型编码
     name 字典类型名称
     description 描述
     关于字典类型表，没有传统意义的id，code是字典类型编码，起到的就是id的作用

     字典值表
     id 主键
     value 字典值（我们开发人员使用的值）
     text 选项真正显示的文本（使用系统的用户使用的值）
     orderNo 排序号
     typeCode 外键 字典类型编码 关联tbl_dic_type表

     这两张表之间的关系，是一对多的关系
     一个字典类型，对应多个字典值，一个字典值只能从属于一种类型

     举例说明两张表表结构：
     性别：
     <input type="radio" name="gender" value="a"/>男
     <input type="radio" name="gender" value="b"/>女

     类型：性别
     值：男 女
     用户可见的文本（男 女）是text字段信息
     元素中的value属性值（a b）是value字段信息

     关于类型和值
     类型：城市
     值：北京 上海 ...

     类型：部门
     值：市场部 销售部 研发部...

     类型：爱好
     值：抽烟 喝酒 烫头 ...

===========================================================================

服务器缓存

    我们可以将数据字典查询出来保存到服务器的内存当中，在系统运行的时候，方便使用。
    这些保存在服务器内存中的数据（数据字典），就是服务器缓存

    缓存：内存中保存的数据

    为什么要使用服务器缓存来处理数据字典？
        因为可以提升系统执行的效率,省却掉了访问数据库的时间

    我们之前在学习市场活动的时候，也涉及到了下拉框相关的操作
    所有者下拉框
    我们处理所有者下拉框的方式是，每一次在打开模态窗口前，
    都需要访问一次后台，取得用户信息列表的数据，为所有者的下拉框铺用户列表的数据

    我们可不可以将所有者中的数据（用户信息列表），处理成为服务器缓存呢？
    这样做是不行的，因为用户表每天都是在实时更新的，
    如果读取的是服务器缓存，那么就读取不到表中最新的用户的数据
    所以我们不能这么做，只能每一次都查询最新的表中的用户信息记录

    由于数据字典中的数据，很难发生变化，所以我们的服务器缓存技术只适用在数据字典的处理上

关于服务器缓存的实现：
    服务器缓存处理的时机：服务器启动的时候
    时机如何做到：使用监听器
    如何将数据保存到服务器内存中：application.setAttribute()

当服务器启动，服务器会自动的为我们创建一个全局域对象application，
当application对象创建完毕后，用来监听application对象创建的监听器的方法立即执行，
我们就在这个方法中，连接数据库，取得数据字典数据，保存到application中
当数据字典中的数据保存到了application中之后，只要服务器不关闭，
application对象就始终存在，里面保存的数据字典数据也会以服务器缓存的形式始终存在
当服务器关闭，application对象自动销毁，在销毁过程中，移除掉数据字典数据


=======================================================================

List<DicValue> dvList = select * from tbl_dic_value
dvList:47条记录
将所有的数据字典值全取出来了，这样的列表是使用不了的
例如我们现在要展现"称呼"的下拉列表，称呼的下拉列表中的数据应该是5条，这47条还得筛选出来需要的这5条记录，非常麻烦

我们应该根据字典类型的这个外键，分门别类的保存数据字典值

称呼
List<DicValue> dvList1 = select * FROM tbl_dic_value where typeCode='appellation'
dvList1:5条

线索状态
List<DicValue> dvList2 = select * FROM tbl_dic_value where typeCode='clueState'
dvList2:7条

回访优先级
List<DicValue> dvList3 = select * FROM tbl_dic_value where typeCode='returnPriority'
dvList3:5条

...
...
dvList7

这7个dvList的条数加在一起，应该才是47条

在业务层将这个7个dvList取得之后，为这7个dvList以字典类型编码的方式命名为key，以map的形式来保存这些值

key:typeCode
value:dvList

Map<String,List<DicValue>> map = ....
map.put("appellationList",dvList1);
map.put("clueStateList",dvList2);
...
...
map中最终保存了7组键值对
将map返回listener后，拆解map,将map中所有的键值对保存成为application中的键值对






























